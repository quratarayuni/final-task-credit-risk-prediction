# -*- coding: utf-8 -*-
"""final-task-credit-risk-prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vegE_fTxiAJskxXDtLS_mJEZzUny38y6

**📘 1. Import Libraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, roc_auc_score

"""**📂 2. Load Dataset**"""

url = 'https://rakamin-lms.s3.ap-southeast-1.amazonaws.com/vix-assets/idx-partners/loan_data_2007_2014.csv'
df = pd.read_csv(url)
print("Jumlah baris dan kolom:", df.shape)
df.head()

"""**📊 3. Data Understanding**"""

print("Ukuran data:", df.shape)
print(df.info())
df.describe(include='all')

"""**🔍 4. Exploratory Data Analysis (EDA)**"""

df_corr = df.select_dtypes(include='number').corr()
plt.figure(figsize=(12, 8))
sns.heatmap(df_corr, cmap='coolwarm', annot=False)
plt.title("Correlation Heatmap")
plt.show()

"""**🧪 5. Feature Engineering**"""

# 5.1. Encoding dan Scaling
for col in df.select_dtypes(include='object').columns:
    df[col] = LabelEncoder().fit_transform(df[col])

scaler = StandardScaler()
X_scaled = scaler.fit_transform(df.drop('loan_status', axis=1))
X = pd.DataFrame(X_scaled, columns=df.drop('loan_status', axis=1).columns)
y = df['loan_status']

"""**🧹 6. Data Preparation**"""

# 6.1. Ubah loan_status ke label GOOD/BAD
df['loan_status'] = df['loan_status'].apply(lambda x: 'GOOD' if x in ['Fully Paid', 'Current'] else 'BAD')

# 6.2. Drop kolom dengan >20% missing dan baris kosong
df = df.dropna(axis=1, thresh=len(df)*0.8)
df = df.dropna()

# 6.3. Split Data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""**🤖 7. Modeling**"""

# 7.1. Logistic Regression
logreg = LogisticRegression(max_iter=1000)
logreg.fit(X_train, y_train)
y_pred_logreg = logreg.predict(X_test)

# 7.2. Random Forest
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)

"""**📈 8. Evaluation**"""

# 8.1. Logistic Regression
from sklearn.metrics import classification_report, roc_auc_score

print("Logistic Regression Report")
print(classification_report(y_test, y_pred_logreg))

# Cek apakah label sudah dalam bentuk 0/1
if y_test.dtype == 'object':
    y_test_binary = y_test.map({'GOOD': 1, 'BAD': 0})
else:
    y_test_binary = y_test

print("ROC-AUC:", roc_auc_score(y_test_binary, logreg.predict_proba(X_test)[:,1]))

# 8.2. Random Forest
print("\nRandom Forest")
print(classification_report(y_test, y_pred_rf))

# Cek apakah y_test masih berupa string atau sudah 0/1
if y_test.dtype == 'object':
    y_test_binary = y_test.map({'GOOD': 1, 'BAD': 0})
else:
    y_test_binary = y_test

print("ROC-AUC:", roc_auc_score(y_test_binary, rf.predict_proba(X_test)[:,1]))